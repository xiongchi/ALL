# coding=utf-8
import ConfigParser
import datetime

from PIL import Image, ImageEnhance, ImageDraw
from flask import send_file

import da.photoService.fenshiPlan as plan
import da.photoService.fsPByConf as fs_conf
import os
import sys
import time
import threading
from da.dataService.hqService import hqService
from da.main import main
from config import logger
import csv

from da.main.TreadingDay import TreadingDay
from da.utils.configutil import ConfigUtil

mutex = threading.Lock()

mutex.acquire()
# 存放 图片生成时间
time_map = {}
# 存放 图片访问次数
count_map = {}
mutex.release()


@main.route('/')
def hello_world():
    return 'Hello World!'


@main.route('/del/<code>')
def delete(code):
    time_map.clear()
    enhance_path = sys.path[0] + "/da/static/enhance/" + code + ".png"
    img_path = sys.path[0] + "/da/static/img/" + code + ".png"
    os.remove(enhance_path)
    os.remove(img_path)
    return 'Hello World!'


# 记录访问每只股票访问次数
def get_count_map():
    hq = hqService()
    hqUrl = ConfigUtil.getconfig('https', 'ag')
    data = hq.getUrlData(hqUrl)
    secu_list = []
    for i in range(len(data)):
        secu_list.append(data[i]['code'])
    sub_secu_list = list(set(secu_list).difference(set(count_map.keys())))

    now_time_str = time.strftime("%Y%m%d", time.localtime(time.time()))
    dir_path = sys.path[0] + "/da/static/count/" + now_time_str
    isExists = os.path.exists(dir_path)
    if not isExists:
        os.makedirs(dir_path)
    else:
        pass

    f_max = file(dir_path + '/hy_code.csv', 'wb')
    f_max_writer = csv.writer(f_max)
    f_mid = file(dir_path + "/chy_code.csv", 'wb')
    f_mid_writer = csv.writer(f_mid)
    f_min = file(dir_path + "/bhy_code.csv", 'wb')
    f_min_writer = csv.writer(f_min)

    max_map = []
    mid_map = []
    min_map = []
    # print count_map
    if len(sub_secu_list) > 0:
        for i in range(len(sub_secu_list)):
            count_map[sub_secu_list[i]] = 0

    count_list = sorted(count_map.items(), key=lambda d: d[1], reverse=True)
    length = len(count_list)
    for i in range(length):
        if i <= length / 3:
            max_map.append([count_list[i][0], count_list[i][1]])
        elif (i > length / 3) and (i <= (length / 3) * 2):
            mid_map.append([count_list[i][0], count_list[i][1]])
        else:
            min_map.append([count_list[i][0], count_list[i][1]])

    f_max_writer.writerow(['secucode', 'count'])
    f_mid_writer.writerow(['secucode', 'count'])
    f_min_writer.writerow(['secucode', 'count'])
    f_max_writer.writerows(max_map)
    f_mid_writer.writerows(mid_map)
    f_min_writer.writerows(min_map)
    f_max.close()
    f_mid.close()
    f_min.close()


# 执行任务
def task_by_type(type):
    yes_time_str = (datetime.datetime.now() + datetime.timedelta(days=-1)).strftime("%Y%m%d")
    now_time_str = datetime.datetime.now().strftime("%Y-%m-%d")
    td = TreadingDay()
    now_datetime = datetime.datetime.strptime(now_time_str, "%Y-%m-%d")
    temp, trading_date = td.if_TreadingDay_F10(now_time_str)
    if temp is True or trading_date==now_datetime:
        # logger.info("是交易日")
        # 9:20之前和15:10之后不执行
        if time_manage() is False:
            # 分类运行画图任务
            dir_path = sys.path[0] + "/da/static/count/" + yes_time_str
            if type == 'hy':
                # read_csv('hy','E:\\pyWork\\drawPhoto\\drawPhoto\\da\\static\\count\\20171123\\hy_code.csv')
                read_csv('hy', dir_path + '/hy_code.csv')
            elif type == 'chy':
                read_csv('chy', dir_path + '/chy_code.csv')
            elif type == 'bhy':
                read_csv('bhy', dir_path + '/bhy_code.csv')
    else:
        logger.info("不是交易日批处理跳过")
        return


cf = ConfigParser.ConfigParser()  # 实例化


# 读取csv文件
def read_csv(type, file_path):
    with open(file_path) as csvfile:
        reader = csv.DictReader(csvfile)
        codes = [row['secucode'] for row in reader]
        csvfile.close
    # 获取指数代码
    if type == 'hy':
        cf.read(sys.path[0] + "/da/static/code_data/index_code.conf")  # 读取配置文件
        item = cf.get('index', 'code')
        codes.append(item)
    fs_conf.batch_by_conf(type, codes)


# 单独访问获取图片
@main.route('/fs_code/<code>')
def get_fs_code(code):
    # 判断是否是交易日
    now_time_str = datetime.datetime.now().strftime("%Y-%m-%d")
    td = TreadingDay()
    IfTradingDay, trading_date = td.if_TreadingDay_F10(now_time_str)
    # IfTradingDay, trading_date = td.if_TreadingDay_oracle(now_time_str)
    enhance_path = sys.path[0] + "/da/static/enhance/" + code + ".png"
    # print  sys.path[0]
    # print enhance_path
    img_path = sys.path[0] + "/da/static/img/" + code + ".png"
    now_datetime = datetime.datetime.strptime(now_time_str, "%Y-%m-%d")
    if IfTradingDay is True or trading_date == now_datetime:
        # png是否存在
        return is_tradingdate(code, enhance_path, img_path)
    else:
        return is_not_tardingdate(code, enhance_path, img_path, trading_date)



"""
今天不是交易日的处理
"""


def is_not_tardingdate(code, enhance_path, img_path, trading_date):
    # 今天不是交易日，判断增强之后的图片更新时间是否在上个交易日和今天之间
    # if true 直接返回图片
    # else 判断未增强的img，是否在上个交易日和今天之间，if true，增强之后返回 ，else  生成图片
    end_15 = trading_date.strftime("%Y-%m-%d") + " %2d:00:00" % 15
    timeArray_end_15 = datetime.datetime.strptime(end_15, "%Y-%m-%d %H:%M:%S")
    yes_int_15 = time.mktime(timeArray_end_15.timetuple())
    now = time.time()
    enhance_exist = os.path.exists(enhance_path)
    img_exist = os.path.exists(img_path)
    now_time = datetime.datetime.now()
    if code in time_map.keys():
        # map中的时间没有过期
        code_time = time_map[code]
        if timeArray_end_15 <= code_time <= now_time:
            # 图片时间差距
            count(code)
            return send_file(enhance_path, cache_timeout=0)
        else:
            # 执行下面判断
            pass
    if enhance_exist:
        # print '增强之后的图片存在'
        stat_enhance = os.stat(enhance_path)
        stat_time = stat_enhance.st_mtime
        if yes_int_15 <= stat_time <= now:
            count(code)
            return send_file(enhance_path, cache_timeout=0)
        stat_img = os.stat(img_path)
        stat_time_img = datetime.datetime.fromtimestamp(stat_img.st_mtime)
        # 图片时间差距
        if yes_int_15 <= stat_time_img <= now:
            png_enhance(enhance_path, img_path)
            return return_file(enhance_path, code)
        else:
            # 过期
            return create_png(code, enhance_path, img_path)
    else:
        if img_exist:
            stat = os.stat(img_path)
            stat_time = datetime.datetime.fromtimestamp(stat.st_mtime)
            # print '增强之后的图片不存在'
            if yes_int_15 <= stat_time <= now:
                png_enhance(enhance_path, img_path)
                return return_file(enhance_path, code)
            # 图片时间差距
            else:
                # 过期 生成 转换 返回
                return create_png(code, enhance_path, img_path)
        else:
            # 判断是否存在code
            return create_png(code, enhance_path, img_path)


"""
今天是交易日的处理
"""


def is_tradingdate(code, enhance_path, img_path):

    enhance_exist = os.path.exists(enhance_path)
    img_exist = os.path.exists(img_path)
    now_time = datetime.datetime.now()
    time_before = now_time + datetime.timedelta(minutes=-2)
    if code in time_map.keys():
        # map中的时间没有过期
        code_time = time_map[code]
        # 图片时间差距
        code_time_s = (code_time - time_before).total_seconds()
        if int(code_time_s) >= 0:
            # 直接返回
            count(code)
            return send_file(enhance_path, cache_timeout=0)
        else:
            # 执行下面判断
            pass
    if enhance_exist:
        # print '增强之后的图片存在'
        if time_manage(enhance_path) is True:
            count(code)
            return send_file(enhance_path, cache_timeout=0)
        stat = os.stat(img_path)
        stat_time = datetime.datetime.fromtimestamp(stat.st_mtime)
        # 图片时间差距
        stat_time_s = (stat_time - time_before).total_seconds()
        if int(stat_time_s) >= 0:
            # 不过期
            img_stat = os.stat(enhance_path)
            # img修改时间 > eps修改时间
            if img_stat.st_mtime > stat.st_mtime:
                png_enhance(enhance_path, img_path)
                return return_file(enhance_path, code)
            else:
                return create_png(code, enhance_path, img_path)
        else:
            # 过期
            return create_png(code, enhance_path, img_path)
    else:
        if img_exist:
            stat = os.stat(img_path)
            stat_time = datetime.datetime.fromtimestamp(stat.st_mtime)
            # print '增强之后的图片不存在'
            if time_manage(img_path) is True:
                png_enhance(enhance_path, img_path)
                return return_file(enhance_path, code)
            # 图片时间差距
            stat_time_s = (stat_time - time_before).total_seconds()
            if int(stat_time_s) >= 0:
                # 不过期 转换 返回
                png_enhance(enhance_path, img_path)
                return return_file(enhance_path, code)
            else:
                # 过期 生成 转换 返回
                return create_png(code, enhance_path, img_path)
        else:
            # 判断是否存在code
            return  create_png(code, enhance_path, img_path)


"""
计数
"""


def count(code):
    if code not in count_map.keys():
        count_map[code] = 1
    else:
        count_map[code] += 1


"""
判断图片的更新时间是否在
昨天的15:10-今天9:20或者11:40-12:50
"""


def time_manage(image_path=None):
    # print '判断交易时间'
    # 11:40>< 13:40
    # 9:20 <>15:10
    end_15 = datetime.datetime.now().strftime("%Y-%m-%d") + " %2d:02:00" % 15
    end_12 = datetime.datetime.now().strftime("%Y-%m-%d") + " %2d:00:00" % 13
    # 图片时间推迟到11:31 解决图片更新时间和图片内容不符
    start_11 = datetime.datetime.now().strftime("%Y-%m-%d") + " %2d:35:00" % 11
    start_9 = datetime.datetime.now().strftime("%Y-%m-%d") + " %2d:25:00" % 9
    if image_path is None:
        end_15 = datetime.datetime.now().strftime("%Y-%m-%d") + " %2d:10:00" % 17
        end_12 = datetime.datetime.now().strftime("%Y-%m-%d") + " %2d:50:00" % 12
        start_11 = datetime.datetime.now().strftime("%Y-%m-%d") + " %2d:40:00" % 11
        start_9 = datetime.datetime.now().strftime("%Y-%m-%d") + " %2d:25:00" % 9
    now = time.time()
    timeArray_start_9 = time.strptime(start_9, "%Y-%m-%d %H:%M:%S")
    start_int_9 = time.mktime(timeArray_start_9)
    timeArray_end_15 = time.strptime(end_15, "%Y-%m-%d %H:%M:%S")
    end_int_15 = time.mktime(timeArray_end_15)
    timeArray_start_11 = time.strptime(start_11, "%Y-%m-%d %H:%M:%S")
    start_int_11 = time.mktime(timeArray_start_11)
    timeArray_end_12 = time.strptime(end_12, "%Y-%m-%d %H:%M:%S")
    end_int_12 = time.mktime(timeArray_end_12)
    if start_int_9 > now:
        if image_path:
            stat = os.stat(image_path)
            stat_time = stat.st_mtime
            now_time_str = datetime.datetime.now().strftime("%Y-%m-%d")
            td = TreadingDay()
            IfTradingDay, trading_date = td.if_TreadingDay_F10(now_time_str)
            if IfTradingDay is False and isinstance(trading_date, str):
                return False
            end_15 = trading_date.strftime("%Y-%m-%d") + " %2d:02:00" % 15
            timeArray_end_15 = datetime.datetime.strptime(end_15, "%Y-%m-%d %H:%M:%S")
            yest_int_15 = time.mktime(timeArray_end_15.timetuple())
            if yest_int_15 < stat_time < start_int_9:
                return True
            else:
                return False
        else:
            return True
    elif now > end_int_15:
        if image_path:
            stat = os.stat(image_path)
            stat_time = stat.st_mtime
            if stat_time > end_int_15:
                return True
            else:
                return False
        else:
            return True
    elif start_int_11 < now < end_int_12:
        # print '11:40之后'
        if image_path:
            stat = os.stat(image_path)
            stat_time = stat.st_mtime
            if start_int_11 < stat_time < end_int_12:
                return True
            else:
                return False
        else:
            return True
    else:
        #print False
        return False


# 直接生成png
def create_png(code, enhance_path, img_path):
    #start = time.time()
    if plan.fs_secucode_png(code, 1) is False:
        return '请输入正确的编号'  # 画png
    #end = time.time()
    #print '时间' + str(end - start)
    png_enhance(enhance_path, img_path)
    return return_file(enhance_path, code)


# 转换png
def png_enhance(enhance_path, img_path):
    im = Image.open(img_path)
    draw = ImageDraw.Draw(im)
    draw.text((390, 205), "cnstock.com", (220, 220, 220))
    ImageDraw.Draw(im)
    enh = ImageEnhance.Contrast(im)
    enh.enhance(2.0).save(enhance_path)
    # start = time.time()
    #cmd = sys.path[0] + "/da/static/lib/pngquant.exe --force --speed=3 " + enhance_path + " -o " + enhance_path;
    cmd = "pngquant --force --speed=3 " + enhance_path + " -o " + enhance_path;
    os.system(cmd)
    # end = time.time()
    # print "时间" + str(end - start)


# 返回图片并记录图片更新时间和访问次数
def return_file(enhance_path, code):
    try:
        count(code)
        time_map[code] = datetime.datetime.now()
        return send_file(enhance_path, cache_timeout=0)
    except:
        return "返回图片错误"
